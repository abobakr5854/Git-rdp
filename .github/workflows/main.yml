name: Ultra Simple RDP Server (FRP - final)

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Username'
        required: true
        default: 'user'
      password:
        description: 'Password'
        required: true
        default: 'Pass123!'

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup RDP (enable + user)
      shell: powershell
      run: |
        # Enable RDP and firewall rules
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
        Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' -ErrorAction SilentlyContinue

        # Read inputs (GH Actions will substitute these)
        $username = '${{ github.event.inputs.username }}'
        $passwordPlain = '${{ github.event.inputs.password }}'
        $securePass = ConvertTo-SecureString $passwordPlain -AsPlainText -Force

        try {
            New-LocalUser -Name $username -Password $securePass -PasswordNeverExpires -ErrorAction Stop
            Write-Host ("Created user {0}" -f $username)
        } catch {
            Write-Host "User may already exist, attempting to set password..."
            try {
                Set-LocalUser -Name $username -Password $securePass -ErrorAction Stop
                Write-Host ("Password set for {0}" -f $username)
            } catch {
                Write-Host ("Warning: failed to create or update user: {0}" -f $_)
            }
        }

        Add-LocalGroupMember -Group 'Remote Desktop Users' -Member $username -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group 'Administrators' -Member $username -ErrorAction SilentlyContinue
        Write-Host 'RDP enabled and user configured.'

    - name: Download FRP (v0.52.3)
      shell: powershell
      run: |
        $url = 'https://github.com/fatedier/frp/releases/download/v0.52.3/frp_0.52.3_windows_amd64.zip'
        $out = 'frp.zip'
        Invoke-WebRequest $url -OutFile $out -UseBasicParsing
        Expand-Archive $out -DestinationPath . -Force
        Copy-Item 'frp_0.52.3_windows_amd64\frpc.exe' -Destination 'frpc.exe' -Force
        Write-Host 'FRP downloaded.'

    - name: Create frpc.ini
      shell: powershell
      run: |
        $cfg = @'
        [common]
        server_addr = frp.freefrp.net
        server_port = 7000

        [rdp]
        type = tcp
        local_ip = 127.0.0.1
        local_port = 3389
        remote_port = 0
        '@
        $cfg | Out-File -FilePath 'frpc.ini' -Encoding ASCII -Force
        Write-Host 'frpc.ini written.'

    - name: Start frpc (detached) and extract assigned port
      shell: powershell
      run: |
        # remove old log if exists
        if (Test-Path 'frp.log') { Remove-Item 'frp.log' -Force }

        Write-Host "Starting frpc (detached) and redirecting output to frp.log..."
        # start frpc detached so runner continues; redirect stdout+stderr to frp.log
        $startCmd = 'start /b "" .\frpc.exe -c frpc.ini > frp.log 2>&1'
        Start-Process -FilePath 'cmd.exe' -ArgumentList '/c', $startCmd -WindowStyle Hidden

        # Wait & parse log for assigned remote port
        $maxWaitSeconds = 60
        $foundPort = $null
        for ($i = 0; $i -lt $maxWaitSeconds; $i++) {
            Start-Sleep -Seconds 1
            if (Test-Path -Path 'frp.log') {
                $lines = Get-Content -Path 'frp.log' -ErrorAction SilentlyContinue
                foreach ($l in $lines) {
                    if ($l -match 'remote_port\s*[:=]?\s*(\d{2,5})') { $foundPort = $matches[1]; break }
                    if ($l -match 'listening.*:(\d{2,5})') { $foundPort = $matches[1]; break }
                    if ($l -match 'address.*:(\d{2,5})') { $foundPort = $matches[1]; break }
                    if ($l -match ':(\d{4,5})(\D|$)') { $foundPort = $matches[1]; break }
                }
                if ($foundPort) { break }
            }
        }

        if ($foundPort) {
            Write-Host ("=== FRP assigned remote port: {0} ===" -f $foundPort)
            # export for other steps
            echo ("FRP_REMOTE_PORT={0}" -f $foundPort) | Out-File -FilePath $env:GITHUB_ENV -Encoding ASCII -Append
        } else {
            Write-Host ("Could not determine assigned remote port within {0} seconds." -f $maxWaitSeconds)
            Write-Host "---- Last 200 lines of frp.log for debug ----"
            if (Test-Path -Path 'frp.log') {
                Get-Content -Path 'frp.log' -Tail 200 | ForEach-Object { Write-Host $_ }
            } else {
                Write-Host "(frp.log not found)"
            }
        }

    - name: Upload frp.log (always, for debugging)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frp-log
        path: frp.log

    - name: Final Connection Info (single-line IP:PORT, user, pass)
      shell: powershell
      run: |
        $srv = 'frp.freefrp.net'
        $usr = '${{ github.event.inputs.username }}'
        $pwd = '${{ github.event.inputs.password }}'
        $port = $env:FRP_REMOTE_PORT

        Write-Host '===================='
        Write-Host 'RDP CONNECTION INFO (FINAL)'
        Write-Host '===================='

        if ($port) {
            Write-Host ("Server: {0}:{1}" -f $srv, $port)
            Write-Host ("Username: {0}" -f $usr)
            Write-Host ("Password: {0}" -f $pwd)
            # single-line summary for easy copy/paste
            Write-Host ("CONNECT => {0}:{1}  |  {2}  |  {3}" -f $srv, $port, $usr, $pwd)
        } else {
            Write-Host ("Server: {0} (port not detected - download frp.log artifact and inspect)" -f $srv)
            Write-Host ("Username: {0}" -f $usr)
            Write-Host ("Password: {0}" -f $pwd)
            Write-Host ("CONNECT => {0}:<PORT_NOT_FOUND>  |  {1}  |  {2}" -f $srv, $usr, $pwd)
        }

        Write-Host '===================='

